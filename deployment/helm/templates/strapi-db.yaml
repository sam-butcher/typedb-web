apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: strapi-db
spec:
  serviceName: "strapi-db"
  replicas: 1
  selector:
    matchLabels:
      app: strapi-db
  template:
    metadata:
      labels:
        app: strapi-db
    spec:
      containers:
        - name: strapi-db
          image: mysql:5.7
          securityContext:
            runAsUser: 1000
            allowPrivilegeEscalation: false
          ports:
            - containerPort: 3306
              name: strapi-db
          envFrom:
            - configMapRef:
                name: strapi-db-config
            - secretRef:
                name: strapi-db-secrets
          volumeMounts:
            - name: storage
              mountPath: /var/lib/strapi/db
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 20Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: strapi-db
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  claimRef:
    namespace: typedb-web
    name: storage-strapi-db-0
  csi:
    driver: pd.csi.storage.gke.io
    volumeHandle: {{ .Values.infrastructure.gcp.strapi_db_disk_id }}
    fsType: ext4
---
apiVersion: v1
kind: Service
metadata:
  name: strapi-db
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: strapi-db
  ports:
    - name: strapi-db
      port: 3306
      targetPort: 3306
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: strapi-db-config
data:
  MYSQL_USER: {{ .Values.db.username }}
  MYSQL_DATABASE: {{ .Values.db.database_name }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: strapi-db-secrets
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: cluster-secret-store
    kind: ClusterSecretStore
  target:
    template:
      type: Opaque
      engineVersion: v2
      data:
        MYSQL_ROOT_PASSWORD: "{{ `{{ .root_password }}` }}"
        MYSQL_PASSWORD: "{{ `{{ .user_password }}` }}"
    name: strapi-db-secrets
    creationPolicy: Owner
  data:
    - secretKey: root_password
      remoteRef:
        key: {{ .Values.infrastructure.gcp.secret_manager.strapi.db.root_password.name }}
        version: {{ .Values.infrastructure.gcp.secret_manager.strapi.db.root_password.version | quote }}
    - secretKey: user_password
      remoteRef:
        key: {{ .Values.infrastructure.gcp.secret_manager.strapi.db.user_password.name }}
        version: {{ .Values.infrastructure.gcp.secret_manager.strapi.db.user_password.version | quote }}
